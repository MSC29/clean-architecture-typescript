/**
ðŸ‘‹ Hi! This file was autogenerated by tslint-to-eslint-config.
https://github.com/typescript-eslint/tslint-to-eslint-config

It represents the closest reasonable ESLint configuration to this
project's original TSLint configuration.

We recommend eventually switching this configuration to extend from
the recommended rulesets in typescript-eslint. 
https://github.com/typescript-eslint/tslint-to-eslint-config/blob/master/docs/FAQs.md

Happy linting! ðŸ’–
*/
module.exports = {
	env: {
		es6: true,
		node: true
	},
	parser: "@typescript-eslint/parser",
	parserOptions: {
		project: "tsconfig.json",
		sourceType: "module"
	},
	plugins: [
		"eslint-plugin-import",
		"eslint-plugin-jsdoc",
		"eslint-plugin-prefer-arrow",
		"@typescript-eslint",
		"scanjs-rules",
		"no-unsanitized",
		"prototype-pollution-security-rules",
		"security",
		"security-node",
		"no-wildcard-postmessage"
	],
	extends: [
		"plugin:@typescript-eslint/recommended",
		"plugin:@typescript-eslint/recommended-requiring-type-checking",
		"prettier",
		"plugin:security/recommended",
		"plugin:security-node/recommended"
	],
	rules: {
		"@typescript-eslint/adjacent-overload-signatures": "error",
		"@typescript-eslint/array-type": [
			"error",
			{
				default: "array"
			}
		],
		"@typescript-eslint/await-thenable": "error",
		"@typescript-eslint/ban-ts-comment": "error",
		"@typescript-eslint/ban-types": [
			"error",
			{
				types: {
					Object: {
						message: "Avoid using the `Object` type. Did you mean `object`?"
					},
					Function: {
						message: "Avoid using the `Function` type. Prefer a specific function type, like `() => void`."
					},
					Boolean: {
						message: "Avoid using the `Boolean` type. Did you mean `boolean`?"
					},
					Number: {
						message: "Avoid using the `Number` type. Did you mean `number`?"
					},
					String: {
						message: "Avoid using the `String` type. Did you mean `string`?"
					},
					Symbol: {
						message: "Avoid using the `Symbol` type. Did you mean `symbol`?"
					}
				}
			}
		],
		"@typescript-eslint/consistent-type-assertions": "error",
		"@typescript-eslint/dot-notation": "off",
		"@typescript-eslint/explicit-member-accessibility": [
			"off",
			{
				accessibility: "explicit"
			}
		],
		"@typescript-eslint/explicit-module-boundary-types": "warn",
		"@typescript-eslint/indent": ["error", "tab"],
		"@typescript-eslint/member-delimiter-style": [
			"error",
			{
				multiline: {
					delimiter: "semi",
					requireLast: true
				},
				singleline: {
					delimiter: "semi",
					requireLast: false
				}
			}
		],
		"@typescript-eslint/member-ordering": "error",
		"@typescript-eslint/naming-convention": [
			"error",
			{
				selector: "property",
				format: null,
				filter: {
					regex: "^(__v)$",
					match: true
				}
			}
		],
		"@typescript-eslint/no-array-constructor": "error",
		"@typescript-eslint/no-empty-function": "error",
		"@typescript-eslint/no-empty-interface": "error",
		"@typescript-eslint/no-explicit-any": "error",
		"@typescript-eslint/no-extra-non-null-assertion": "error",
		"@typescript-eslint/no-extra-semi": "error",
		"@typescript-eslint/no-floating-promises": "error",
		"@typescript-eslint/no-for-in-array": "error",
		"@typescript-eslint/no-implied-eval": "error",
		"@typescript-eslint/no-inferrable-types": [
			"off",
			{
				ignoreProperties: true
			}
		],
		"@typescript-eslint/no-misused-new": "error",
		"@typescript-eslint/no-misused-promises": "error",
		"@typescript-eslint/no-namespace": "error",
		"@typescript-eslint/no-non-null-asserted-optional-chain": "error",
		"@typescript-eslint/no-non-null-assertion": "warn",
		"@typescript-eslint/no-parameter-properties": "off",
		"@typescript-eslint/no-this-alias": "error",
		"@typescript-eslint/no-unnecessary-type-assertion": "error",

		//deactivated since dependencies may not have a typedef and const functions typedef are giving errors in Fastify
		"@typescript-eslint/no-unsafe-assignment": "off",
		"@typescript-eslint/no-unsafe-call": "off",

		"@typescript-eslint/no-unsafe-member-access": "off",
		"@typescript-eslint/no-unsafe-return": "error",
		"@typescript-eslint/no-unused-expressions": "error",
		"@typescript-eslint/no-unused-vars": "error",
		"@typescript-eslint/no-use-before-define": "off",
		"@typescript-eslint/no-var-requires": "error",
		"@typescript-eslint/prefer-as-const": "error",
		"@typescript-eslint/prefer-for-of": "error",
		"@typescript-eslint/prefer-function-type": "error",
		"@typescript-eslint/prefer-namespace-keyword": "error",
		"@typescript-eslint/prefer-regexp-exec": "error",
		"@typescript-eslint/prefer-nullish-coalescing": "error",
		"@typescript-eslint/quotes": ["error", "double"],
		"@typescript-eslint/require-await": "error",
		"@typescript-eslint/restrict-plus-operands": "error",
		"@typescript-eslint/restrict-template-expressions": [
			"error",
			{
				allowNumber: true,
				allowBoolean: true,
				allowAny: true,
				allowNullish: true
			}
		],
		"@typescript-eslint/semi": ["error", "always"],
		"@typescript-eslint/triple-slash-reference": [
			"error",
			{
				path: "always",
				types: "prefer-import",
				lib: "always"
			}
		],
		"@typescript-eslint/typedef": [
			"error",
			{
				arrayDestructuring: true,
				arrowParameter: true,
				memberVariableDeclaration: true,
				objectDestructuring: true,
				parameter: true,
				propertyDeclaration: true,
				variableDeclaration: true,
				variableDeclarationIgnoreFunction: true
			}
		],
		"@typescript-eslint/type-annotation-spacing": "error",
		"@typescript-eslint/unbound-method": "error",
		"@typescript-eslint/unified-signatures": "error",

		/** ScanJS rules **/
		"scanjs-rules/accidental_assignment": 1,
		"scanjs-rules/assign_to_hostname": 1,
		"scanjs-rules/assign_to_href": 1,
		"scanjs-rules/assign_to_location": 1,
		"scanjs-rules/assign_to_onmessage": 1,
		"scanjs-rules/assign_to_pathname": 1,
		"scanjs-rules/assign_to_protocol": 1,
		"scanjs-rules/assign_to_search": 1,
		"scanjs-rules/assign_to_src": 1,
		"scanjs-rules/call_Function": 1,
		"scanjs-rules/call_addEventListener": 1,
		"scanjs-rules/call_addEventListener_deviceproximity": 1,
		"scanjs-rules/call_addEventListener_message": 1,
		"scanjs-rules/call_connect": 1,
		"scanjs-rules/call_eval": 1,
		"scanjs-rules/call_execScript": 1,
		"scanjs-rules/call_hide": 1,
		"scanjs-rules/call_open_remote=true": 1,
		"scanjs-rules/call_parseFromString": 1,
		"scanjs-rules/call_setImmediate": 1,
		"scanjs-rules/call_setInterval": 1,
		"scanjs-rules/call_setTimeout": 1,
		"scanjs-rules/identifier_indexedDB": 1,
		"scanjs-rules/identifier_localStorage": 1,
		"scanjs-rules/identifier_sessionStorage": 1,
		"scanjs-rules/new_Function": 1,
		"scanjs-rules/property_addIdleObserver": 1,
		"scanjs-rules/property_createContextualFragment": 1,
		"scanjs-rules/property_crypto": 1,
		"scanjs-rules/property_geolocation": 1,
		"scanjs-rules/property_getUserMedia": 1,
		"scanjs-rules/property_indexedDB": 1,
		"scanjs-rules/property_localStorage": 1,
		"scanjs-rules/property_mgmt": 1,
		"scanjs-rules/property_sessionStorage": 1,

		/** no-unsanitized rules**/
		"no-unsanitized/method": "error",
		"no-unsanitized/property": "error",

		/** prototype-pollution-security-rules rules**/
		"prototype-pollution-security-rules/detect-merge": 1,
		"prototype-pollution-security-rules/detect-merge-objects": 1,
		"prototype-pollution-security-rules/detect-merge-options": 1,
		"prototype-pollution-security-rules/detect-deep-extend": 1,

		/** no-wildcard-postmessage (NodeJS) rules**/
		"no-wildcard-postmessage/no-wildcard-postmessage": 1,

		"brace-style": ["off", "off"],
		"comma-dangle": "error",
		complexity: "off",
		"constructor-super": "error",
		curly: "error",
		"eol-last": "error",
		eqeqeq: ["error", "smart"],
		"guard-for-in": "error",
		"id-blacklist": "off",
		"id-match": "off",
		"import/order": "off",
		"import/no-deprecated": "error",
		"jsdoc/check-alignment": "error",
		"jsdoc/check-indentation": "error",
		"jsdoc/newline-after-description": "error",
		"max-classes-per-file": ["error", 1],
		"max-len": [
			"error",
			{
				code: 190
			}
		],
		"new-parens": "error",
		"no-array-constructor": "off",
		"no-bitwise": "off",
		"no-caller": "error",
		"no-cond-assign": "error",
		"no-console": [
			"off",
			{
				allow: [
					"log",
					"warn",
					"dir",
					"timeLog",
					"assert",
					"clear",
					"count",
					"countReset",
					"group",
					"groupEnd",
					"table",
					"dirxml",
					"error",
					"groupCollapsed",
					"Console",
					"profile",
					"profileEnd",
					"timeStamp",
					"context"
				]
			}
		],
		"no-debugger": "error",
		"no-empty": "error",
		"no-empty-function": "off",
		"no-eval": "error",
		"no-extra-semi": "off",
		"no-fallthrough": "error",
		"no-implied-eval": "off",
		"no-invalid-this": "off",
		"no-new-wrappers": "error",
		"no-redeclare": "error",
		"no-shadow": [
			"error",
			{
				hoist: "all"
			}
		],
		"no-throw-literal": "error",
		"no-trailing-spaces": "off",
		"no-undef-init": "error",
		"no-underscore-dangle": "off",
		"no-unsafe-finally": "error",
		"no-unused-labels": "error",
		"no-unused-vars": "off",
		"no-var": "error",
		"object-shorthand": "error",
		"one-var": ["error", "never"],
		"prefer-arrow/prefer-arrow-functions": "error",
		"prefer-const": [
			"error",
			{
				destructuring: "all",
				ignoreReadBeforeAssign: true
			}
		],
		radix: "error",
		"require-await": "off",
		"use-isnan": "error",
		"valid-typeof": "off"
	},
	overrides: [
		{
			files: ["tests/**/**.*", "*.test.ts"],
			rules: {
				"no-unused-expressions": "off"
			}
		}
	]
};
